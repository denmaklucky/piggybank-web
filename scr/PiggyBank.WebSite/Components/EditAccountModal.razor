@using PiggyBank.Common.Enums

@if (Show)
{
    <div class="modal" role="dialog" style="@ModalStyle">
        <div class="modal_header">
            <button class="close f_right" @onclick="OnHidden">×</button>
            <h1 class="font_size_16">Edit Account</h1>
        </div>
        <div class="modal_body">
            <div>
                <div class="m_bottom_5">
                    <label class="label">NAME</label>
                </div>
                <div class="w_calc_20">
                    <input class="textbox" value="@Account.Title" />
                </div>
            </div>
            <div>
                <div class="m_bottom_5">
                    <label class="label">Balance</label>
                </div>
                <div class="w_calc_20">
                    <input class="textbox" value="@Account.Balance" />
                </div>
            </div>
            <div>
                <div class="m_bottom_5">
                    <label class="label">Currency</label>
                </div>
                <div class="w_calc_20">
                    <input class="textbox" value="@Account.Currency" />
                </div>
            </div>
            <div>
                <div class="m_bottom_5">
                    <label class="label">Type</label>
                </div>
                <div>
                    <select class="combobox">
                        @foreach (var item in Enum.GetNames(typeof(AccountType)))
                        {
                            @if (Account.Type.ToString() == item)
                            {
                                <option selected>@item</option>
                            }
                            else
                            {
                                <option>@item</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="modal_footer">
            <button class="success" @onclick="OnSave">Save</button>
        </div>
    </div>

    <div class="@Class" />
}

@code {
    private const string DisplayNone = "display:none;";
    private const string DisplayBlock = "display:block;";
    private const string BackgroundClass = "modal_background";

    private string ModalStyle = DisplayBlock;
    private string Class = BackgroundClass;

    [Parameter]
    public AccountInfoDto Account { get; set; }

    [Parameter]
    public EventCallback<AccountInfoDto> Saved { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Hided { get; set; }

    private bool _show;

    [Parameter]
    public bool Show
    {
        get => _show;
        set
        {
            if (_show == value)
                return;

            _show = value;
            if (_show)
            {
                Class = BackgroundClass;
                ModalStyle = DisplayBlock;
            }
            else
            {
                Class = "";
                ModalStyle = DisplayNone;
            }
        }
    }

    public void OnHidden(MouseEventArgs args)
        => Hided.InvokeAsync(args);

    public Task OnSave()
        => Saved.InvokeAsync(Account);
}
